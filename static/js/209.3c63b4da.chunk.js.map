{"version":3,"file":"static/js/209.3c63b4da.chunk.js","mappings":"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","sources":["assets/icons/send.svg","components/Chat/ChatPage.tsx"],"sourcesContent":["var _path;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgSend(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 32,\n    height: 32,\n    viewBox: \"0 0 32 32\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M28.0939 3.90613L13.8753 18.1248M4.36146 10.9804L26.5027 3.29873C27.8662 2.82567 29.1743 4.13384 28.7013 5.49735L21.0196 27.6385C20.4934 29.1554 18.3634 29.197 17.7784 27.7018L14.2625 18.7169C14.0869 18.2681 13.7319 17.9131 13.2831 17.7375L4.29818 14.2216C2.80306 13.6366 2.84464 11.5066 4.36146 10.9804Z\",\n    stroke: \"white\",\n    strokeWidth: 2,\n    strokeLinecap: \"round\"\n  })));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgSend);\nexport default __webpack_public_path__ + \"static/media/send.d78ac548aada037be4bb7e6fafa300f7.svg\";\nexport { ForwardRef as ReactComponent };","import React, { useEffect, useRef, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport styled from 'styled-components';\nimport { ChatMessageAPIType } from '../../DAL/chat-api';\nimport { sendMessage, startMessagesListening, stopMessagesListening } from '../../redux/chat-reducer';\nimport { AppStateType } from '../../redux/redux-store';\nimport send from '../../assets/icons/send.svg';\n\nconst StyledChatPage = styled.div`\n   margin: 10px;\n`;\nconst ChatPageTitle = styled.h1`\n   font-size: 32px;\n   color: #886DF5;\n   font-weight: 600;\n   text-align: center;\n   margin-bottom: 20px;\n`;\nconst StyledChat = styled.div`\n   padding: 30px;\n   border: 5px solid #B7A8F5;\n   box-shadow: 0px 0px 24px 4px #B7A8F5;\n   border-radius: 33px;\n`;\n\nconst ChatPage: React.FC = () => {\n   return (\n      <StyledChatPage>\n         <ChatPageTitle>ChatPage</ChatPageTitle>\n         <StyledChat><Chat /></StyledChat>\n      </StyledChatPage>\n   );\n}\nexport default ChatPage;\n\n\nconst Chat: React.FC = () => {\n   const dispatch: any = useDispatch()\n   const status = useSelector((state: AppStateType) => state.chat.status)\n   useEffect(() => {\n      dispatch(startMessagesListening())\n      return () => {\n         dispatch(stopMessagesListening())\n      }\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n   }, [])\n   return (\n      <div>\n         {status === 'error' && <div>Some errror occured. Please, refresh the page</div>}\n         <Messages />\n         <AddMessageForm />\n      </div>\n   );\n}\n\nconst MessagesBlock = styled.div`\n   height: 400px;\n   overflow: auto;\n`;\nconst Messages: React.FC = () => {\n   const messages = useSelector((state: AppStateType) => state.chat.messages)\n   const messagesAnchorRef = useRef<HTMLDivElement>(null)\n   const [isAutoScroll, setIsAutoScroll] = useState(true)\n\n   const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\n      const element = e.currentTarget\n      if (Math.abs((element.scrollHeight - element.scrollTop) - element.clientHeight) < 300) {\n         !isAutoScroll && setIsAutoScroll(true)\n      } else {\n         isAutoScroll && setIsAutoScroll(false)\n      }\n   }\n   useEffect(() => {\n      if (isAutoScroll) {\n         messagesAnchorRef.current?.scrollIntoView({ behavior: 'smooth' })\n      }\n   }, [messages, isAutoScroll])\n\n   return <MessagesBlock onScroll={scrollHandler}>\n      {messages.map((m, index) => <Message key={index} message={m} />)}\n      <div ref={messagesAnchorRef}></div>\n   </MessagesBlock>\n}\n\nconst StyledMessage = styled.div<{ messageAlign: string }>`\n   display: flex;\n   justify-content: ${(props) => props.messageAlign};\n   gap: 20px;\n   background-color: #B7A8F5;\n   border-radius: 30px;\n   padding: 10px 20px;\n   overflow: scroll;\n   &:not(:last-child){\n      margin-bottom: 10px;\n   }\n   .message-image{\n      width: 50px;\n      border-radius: 50%;\n   }\n   .fullName{\n      font-size: 18px;\n      font-weight: 700;\n      margin-bottom: 5px;\n   }\n`;\nconst Message: React.FC<{ message: ChatMessageAPIType }> = ({ message }) => {\n   const ownerUserId = useSelector((state: AppStateType) => state.auth.userId)\n   return (\n      <StyledMessage messageAlign={message.userId === ownerUserId ? 'flex-end' : 'flex-start'}>\n         {(message.userId !== ownerUserId)\n            ? <>\n               <div>\n                  <img src={message.photo || \"https://www.shareicon.net/data/512x512/2016/05/29/772559_user_512x512.png\"} alt=\"\" className='message-image' />\n               </div>\n               <div>\n                  <div className=\"fullName\" style={{ textAlign: 'left' }}>{message.userName}</div>\n                  <div>{message.message}</div>\n               </div>\n            </>\n            : <>\n               <div>\n                  <div className=\"fullName\" style={{ textAlign: 'right' }}>{message.userName}</div>\n                  <div>{message.message}</div>\n               </div>\n               <div>\n                  <img src={message.photo || \"https://www.shareicon.net/data/512x512/2016/05/29/772559_user_512x512.png\"} alt=\"\" className='message-image' />\n               </div>\n            </>}\n\n      </StyledMessage>\n   );\n}\nconst StyledSendMessage = styled.div`\n   .sendMessage-textarea{\n      display: block;\n      min-height: 80px;\n      padding: 15px 130px 15px 15px;\n      color: #E3E3E3;\n      font-weight: 600;\n      width: 100%;\n      font-size: 20px;\n      resize: vertical;\n      background-color:#8000FF;\n      border-radius: 0px 30px 30px 30px;\n      margin-bottom: 10px;\n   }\n   .sendMessage-textarea::placeholder {\n      color: #E3E3E3;\n   }\n   .sendMessage-textarea:focus {\n      border: 1px solid #B7A8F5;\n   }\n`;\nconst SendButton = styled.button`\n   position: absolute;\n   right: 10px;\n   top: 10px;\n   background-color: #B7A8F5;\n   border-radius: 30px;\n   color: #fff;\n   font-size: 20px;\n   font-weight: 500;\n   padding: 5px 15px;\n   transition: all 0.3s linear;\n   &:hover{\n      box-shadow: 0px 0px 24px 4px #B7A8F5;\n   }\n`;\nconst AddMessageForm: React.FC = () => {\n   const [message, setMessage] = useState('')\n   const dispatch: any = useDispatch()\n   const status = useSelector((state: AppStateType) => state.chat.status)\n\n   const sendMessageHandler = () => {\n      if (!message) {\n         return\n      }\n      dispatch(sendMessage(message))\n      setMessage('')\n   }\n   return (\n      <StyledSendMessage>\n         <div style={{ position: 'relative', width: '30vw'}}>\n            <textarea onChange={(e) => setMessage(e.currentTarget.value)}\n               value={message}\n               className='sendMessage-textarea'\n               placeholder='Send message . . .'></textarea>\n            <SendButton type=\"submit\" disabled={status !== 'ready'} onClick={sendMessageHandler}>\n               <img src={send} alt=\"\" />\n            </SendButton>\n         </div>\n      </StyledSendMessage>\n   );\n}"],"names":["StyledChatPage","styled","ChatPageTitle","StyledChat","Chat","dispatch","useDispatch","status","useSelector","state","chat","useEffect","startMessagesListening","stopMessagesListening","Messages","AddMessageForm","MessagesBlock","messages","messagesAnchorRef","useRef","useState","isAutoScroll","setIsAutoScroll","current","scrollIntoView","behavior","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","m","index","Message","message","ref","StyledMessage","props","messageAlign","ownerUserId","auth","userId","src","photo","alt","className","style","textAlign","userName","StyledSendMessage","SendButton","setMessage","position","width","onChange","value","placeholder","type","disabled","onClick","sendMessage","send"],"sourceRoot":""}